def registry = 'https://infoscion.jfrog.io'

pipeline{
    agent {
        node {
            label "slave"
        }
    }
    environment {
        PATH = "/opt/maven/bin:$PATH"
    }
    stages {
        stage('build') {
            steps{
                echo "------------ build started ---------"
                sh 'mvn clean deploy'
                echo "------------ build completed ---------"
        }
      }
        stage("Code analysis"){
            environment{
                scannerHome = tool "SonarQube_Scanner"
            }
            steps{
                echo '<--------------- Sonar Analysis started  --------------->'
                withSonarQubeEnv('SonarQube_Server'){
                     sh "${scannerHome}/bin/sonar-scanner"
                }
            }
        }
        stage("quality gate"){
            steps{
                script {
                echo '<--------------- Sonar Gate Analysis Started --------------->'
                timeout(time: 1, unit: 'HOURS'){ 
                def qg = waitForQualityGate()
                if(qg.status !='OK') {
                    error "Pipeline failed due to quality gate failures: ${qg.status}"
                }
                }
                echo '<--------------- Sonar Gate Analysis Ends --------------->'
            }
            }
        }
        stage("Jar Publish") {
        steps {
            script {
                    echo '<--------------- Jar Publish Started --------------->'
                     def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrogcred"
                     def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                     def uploadSpec = """{
                          "files": [
                            {
                              "pattern": "jarstaging/(*)",
                              "target": "twittertrend-libs-release-local/{1}",
                              "flat": "false",
                              "props" : "${properties}",
                              "exclusions": [ "*.sha1", "*.md5"]
                            }
                         ]
                     }"""
                     def buildInfo = server.upload(uploadSpec)
                     buildInfo.env.collect()
                     server.publishBuildInfo(buildInfo)
                     echo '<--------------- Jar Publish Ended --------------->'  
            
            }
        }   
    }   

        }
    }
